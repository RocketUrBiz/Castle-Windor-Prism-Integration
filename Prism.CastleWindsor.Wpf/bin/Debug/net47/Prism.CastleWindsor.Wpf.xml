<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism.CastleWindsor.Wpf</name>
    </assembly>
    <members>
        <member name="T:Prism.CastleWindsor.PrismApplication">
            <summary>
            InKnowWorks Contropolus Prism Application
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.PrismApplication.CreateContainerExtension">
            <summary>
            Create a new <see cref="T:Prism.CastleWindsor.CastleWindsorContainerExtension"/> used by Prism.
            </summary>
            <returns>A new <see cref="T:Prism.CastleWindsor.CastleWindsorContainerExtension"/>.</returns>
        </member>
        <member name="M:Prism.CastleWindsor.PrismApplication.RegisterRequiredTypes(Prism.Ioc.IContainerRegistry)">
            <summary>
            Castle Windsor dependency model runs much deeper than Dryloc and Unity so we have to
            register dependent modules
            </summary>
            <param name="containerRegistry"></param>
        </member>
        <member name="M:Prism.CastleWindsor.PrismApplication.RegisterFrameworkExceptionTypes">
            <summary>
            
            </summary>
        </member>
        <member name="T:Prism.CastleWindsor.PrismBootstrapper">
            <summary>
            Base bootstrapper class that uses <see cref="T:Prism.CastleWindsor.CastleWindsorContainerExtension"/> as it's container.
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.PrismBootstrapper.CreateContainerExtension">
            <summary>
            Create a new <see cref="T:Prism.CastleWindsor.CastleWindsorContainerExtension"/> used by Prism.
            </summary>
            <returns>A new <see cref="T:Prism.CastleWindsor.CastleWindsorContainerExtension"/>.</returns>
        </member>
        <member name="M:Prism.CastleWindsor.PrismBootstrapper.RegisterFrameworkExceptionTypes">
            <summary>
            Registers the <see cref="T:System.Type"/>s of the Exceptions that are not considered 
            root exceptions by the <see cref="T:System.ExceptionExtensions"/>.
            </summary>
        </member>
        <member name="T:Prism.CastleWindsor.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Properties.Resources.NotOverwrittenGetModuleEnumeratorException">
            <summary>
              Looks up a localized string similar to The method &apos;GetModuleEnumerator&apos; of the bootstrapper must be overwritten in order to use the default module initialization logic..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Properties.Resources.NullLoggerFacadeException">
            <summary>
              Looks up a localized string similar to The ILoggerFacade is required and cannot be null..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Properties.Resources.NullModuleCatalogException">
            <summary>
              Looks up a localized string similar to The IModuleCatalog is required and cannot be null in order to initialize the modules..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Properties.Resources.NullUnityContainerException">
            <summary>
              Looks up a localized string similar to The IUnityContainer is required and cannot be null..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Properties.Resources.SettingTheRegionManager">
            <summary>
              Looks up a localized string similar to Setting the RegionManager..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Properties.Resources.TypeMappingAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; was already registered by the application. Skipping....
            </summary>
        </member>
        <member name="T:Prism.CastleWindsor.ExceptionResolution.ResolutionFailedException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.ExceptionResolution.ResolutionFailedException.#ctor(System.Type,System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="typeRequested"></param>
            <param name="nameRequested"></param>
            <param name="message"></param>
            <param name="innerException"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="P:Prism.CastleWindsor.ExceptionResolution.ResolutionFailedException.TypeRequested">
            <summary>
            
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.ExceptionResolution.ResolutionFailedException.NameRequested">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.ExceptionResolution.ResolutionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Prism.CastleWindsor.ExceptionResolution.ResolutionFailedException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.ExceptionResolution.ResolutionFailedException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Prism.CastleWindsor.ExceptionResolution.ResolutionFailedException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Prism.CastleWindsor.CastleWindsorContainerExtension">
            <summary>
            The <see cref="T:Prism.Ioc.IContainerExtension" /> Implementation to use with CastleWindsor
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.CastleWindsorContainerExtension.Instance">
            <summary>
            The instance of the wrapped container
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.#ctor">
            <summary>
            Constructs a default <see cref="T:Prism.CastleWindsor.CastleWindsorContainerExtension" />
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.#ctor(Castle.Windsor.IWindsorContainer)">
            <summary>
            Constructs a <see cref="T:Prism.CastleWindsor.CastleWindsorContainerExtension" /> with the specified <see cref="T:Castle.Windsor.IWindsorContainer" />
            </summary>
            <param name="container"></param>
        </member>
        <member name="P:Prism.CastleWindsor.CastleWindsorContainerExtension.CurrentScope">
            <summary>
            Gets the current <see cref="T:Prism.Ioc.IScopedProvider"/>
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.FinalizeExtension">
            <summary>
            Used to perform any final steps for configuring the extension that may be required by the container.
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterInstance(System.Type,System.Object)">
            <summary>
            Registers an instance of a given <see cref="T:System.Type"/>
            </summary>
            <param name="type">The service <see cref="T:System.Type"/> that is being registered</param>
            <param name="instance">The instance of the service or <see cref="T:System.Type" /></param>
            <returns>The <see cref="T:Prism.Ioc.IContainerRegistry" /> instance</returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterInstance(System.Type,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterSingletonType``1(System.Object,System.String)">
            <summary>
            Register a TServiceImplementation object type instance as a singleton
            </summary>
            <typeparam name="TServiceImplementation"></typeparam>
            <param name="instance"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterTypeWithLifeStyleType``2(System.String,Castle.Core.LifestyleType)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="lifeStyleScopeType"></param>
            <typeparam name="TServiceInterface"></typeparam>
            <typeparam name="TServiceImplementation"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterSingleton(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="serviceInterfaceType"></param>
            <param name="serviceImplementationType"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterSingleton(System.Type,System.Type,System.String)">
            <summary>
            Call-down Castle API to Register a Singleton via Typed Object Instance type using a supplied name
            </summary>
            <param name="serviceInterfaceType"></param>
            <param name="serviceImplementationType"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterSingleton(System.Type,System.Func{System.Object})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="factoryMethod"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterSingleton(System.Type,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="factoryMethod"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterManySingleton(System.Type,System.Type[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="serviceTypes"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterSingleton``2(System.String)">
            <summary>
            Call-down to the Castle API to Register a Singleton Type via Generics using a supplied name 
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterSingleton``2">
            <summary>
            This method takes no parameters and will register the TInterfaceService and TServiceImplementation using the Fullname of the of the
            types in the host assembly
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.Register(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="fromServiceType"></param>
            <param name="toServiceType"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.Register(System.Type,System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="fromServiceType"></param>
            <param name="toServiceType"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.Register(System.Type,System.Func{System.Object})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="factoryMethod"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.Register(System.Type,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="factoryMethod"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterMany(System.Type,System.Type[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="serviceTypes"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterScoped(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="from"></param>
            <param name="to"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterScoped(System.Type,System.Func{System.Object})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="factoryMethod"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.RegisterScoped(System.Type,System.Func{Prism.Ioc.IContainerProvider,System.Object})">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="factoryMethod"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.Resolve(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.Resolve(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.Resolve(System.Type,System.ValueTuple{System.Type,System.Object}[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.Resolve(System.Type,System.String,System.ValueTuple{System.Type,System.Object}[])">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.CreateScope">
            <summary>
            Creates a new Scope
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.CreateScope(System.String)">
            <summary>
            Creates a new Scope
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.CreateScopeInternal">
            <summary>
            Creates a new Scope and provides the updated ServiceProvider
            </summary>
            <returns>A child <see cref="T:Castle.Windsor.IWindsorContainer" />.</returns>
            <remarks>
            This should be called by custom implementations that Implement IServiceScopeFactory
            </remarks>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.CreateScopeInternal(System.String)">
            <summary>
            Creates a new Scope and provides the updated ServiceProvider
            </summary>
            <returns>A child <see cref="T:Castle.Windsor.IWindsorContainer" />.</returns>
            <remarks>
            This should be called by custom implementations that Implement IServiceScopeFactory
            </remarks>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.IsRegistered(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.CastleWindsorContainerExtension.IsRegistered(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Prism.CastleWindsor.CastleWindsorContainerExtension.CastleWindsorScopedProvider">
            <summary>
            
            </summary>
        </member>
        <member name="T:Prism.CastleWindsor.PrismIocExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.PrismIocExtensions.GetContainer(Prism.Ioc.IContainerProvider)">
            <summary>
            Gets the <see cref="T:Castle.Windsor.IWindsorContainer" /> from the <see cref="T:Prism.Ioc.IContainerProvider" />
            </summary>
            <param name="containerProvider">The current <see cref="T:Prism.Ioc.IContainerProvider" /></param>
            <returns>The underlying <see cref="T:Castle.Windsor.IWindsorContainer" /></returns>
        </member>
        <member name="M:Prism.CastleWindsor.PrismIocExtensions.GetContainer(Prism.Ioc.IContainerRegistry)">
            <summary>
            Gets the <see cref="T:Castle.Windsor.IWindsorContainer" /> from the <see cref="T:Prism.Ioc.IContainerProvider" />
            </summary>
            <param name="containerRegistry">The current <see cref="T:Prism.Ioc.IContainerRegistry" /></param>
            <returns>The underlying <see cref="T:Castle.Windsor.IWindsorContainer" /></returns>
        </member>
        <member name="T:Prism.CastleWindsor.Legacy.CastleWindsorContainerLegacyExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerLegacyExtensions.RegisterType``2(Castle.Windsor.IWindsorContainer,System.String)">
            <summary>Register a theClassType mapping with the container.</summary>
            <remarks>
            This method is used to tell the container that when asked for theClassType <typeparamref name="TServiceType" />,
            actually return an instance of theClassType <typeparamref name="TClassType" />. This is very useful for
            getting instances of interfaces.
            </remarks>
            <typeparam name="TServiceType"><see cref="T:System.Type" /> that wil l be requested.</typeparam>
            <typeparam name="TClassType"><see cref="T:System.Type" /> that will actually be returned.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="name">Name of this mapping.</param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer" /> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerLegacyExtensions.RegisterInstance(Castle.Windsor.IWindsorContainer,System.Type,System.Object)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="type"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerLegacyExtensions.RegisterInstance``2(Castle.Windsor.IWindsorContainer,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="type"></param>
            <param name="instance"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerLegacyExtensions.RegisterTypeForNavigation``1(Castle.Windsor.IWindsorContainer,System.String)">
            <summary>
            Registers an object for navigation.
            </summary>
            <typeparam name="T">The Type of the object to register</typeparam>
            <typeparam name="TServiceImplementation"></typeparam>
            <param name="container"><see cref="T:Castle.Windsor.IWindsorContainer"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the object.</param>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerLegacyExtensions.RegisterType``2(Castle.Windsor.IWindsorContainer,System.String,Castle.Core.LifestyleType)">
            <summary>Register a theClassType mapping with the container.</summary>
            <remarks>
            This method is used to tell the container that when asked for theClassType <typeparamref name="TServiceInterface" />,
            actually return an instance of theClassType <typeparamref name="TServiceImplementation" />. This is very useful for
            getting instances of interfaces.
            </remarks>
            <typeparam name="TServiceInterface"><see cref="T:System.Type" /> that will be requested.</typeparam>
            <typeparam name="TServiceImplementation"><see cref="T:System.Type" /> that will actually be returned.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="name">Name of this mapping.</param>
            <param name="theLifestyleType"></param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer" /> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerLegacyExtensions.RegisterType``1(Castle.Windsor.IWindsorContainer,System.String,Castle.Core.LifestyleType)">
            <summary>Register a theClassType mapping with the container.</summary>
            <remarks>
            This method is used to tell the container that when asked for theClassType <typeparamref name="TFrom" />,
            actually return an instance of theClassType <typeparamref name="TServiceImplementation" />. This is very useful for
            getting instances of interfaces.
            </remarks>
            <typeparam name="TFrom"><see cref="T:System.Type" /> that will be requested.</typeparam>
            <typeparam name="TServiceImplementation"><see cref="T:System.Type" /> that will actually be returned.</typeparam>
            <param name="container">Container to configure.</param>
            <param name="name">Name of this mapping.</param>
            <param name="theLifestyleType"></param>
            <returns>The <see cref="T:Microsoft.Practices.Unity.UnityContainer" /> object that this method was called on (this in C#, Me in Visual Basic).</returns>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerLegacyExtensions.Resolve(Castle.Windsor.IWindsorContainer,System.Type,System.String)">
            <summary>
            Resolves a service from the container. If the theClassType does not exist on the container, 
            first registers it with transient lifestyle.
            </summary>
            <param name="container"></param>
            <param name="theServiceImplementationType"></param>
            <param name="serviceTypeName"></param>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerLegacyExtensions.RegisterType``2(Castle.Windsor.IWindsorContainer)">
            <summary>
            Registers the theClassType on the container.
            </summary>
            <typeparam name="TServiceInterface">The theClassType of the interface.</typeparam>
            <typeparam name="TServiceImplementation">The theClassType of the service.</typeparam>
            <param name="container">The container.</param>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerLegacyExtensions.RegisterType``2(Castle.Windsor.IWindsorContainer,System.Boolean)">
            <summary>
            Registers the theClassType on the container.
            </summary>
            <typeparam name="TServiceInterface">The theClassType of interface.</typeparam>
            <typeparam name="TServiceImplementation">The theClassType of the service.</typeparam>
            <param name="container">The container.</param>
            <param name="singleton">if set to <c>true</c> theClassType will be registered as singleton.</param>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerLegacyExtensions.Resolve(Castle.Windsor.IWindsorContainer,System.Type)">
            <summary>
            Basic function for Resolve 
            </summary>
            <param name="windsorContainer"></param>
            <param name="serviceImplementationType"></param>
            <returns></returns>
        </member>
        <member name="T:Prism.CastleWindsor.Legacy.CastleWindsorContainerHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerHelper.IsTypeRegistered(Castle.Windsor.IWindsorContainer,System.Type)">
            <summary>
            Returns whether a specified theClassType has a theClassType mapping registered in the container.
            </summary>
            <param name="container">The <see cref="T:Castle.Windsor.IWindsorContainer"/> to check for the theClassType mapping.</param>
            <param name="type">The theClassType to check if there is a theClassType mapping for.</param>
            <returns><see langword="true"/> if there is a theClassType mapping registered for <paramref name="type"/>.</returns>
            <remarks>In order to use this extension method, you first need to add the
            </remarks>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerHelper.IsTypeRegistered``1(Castle.Windsor.IWindsorContainer)">
            <summary>
            Extension method to act on the object accessible via this point variable
            </summary>
            <param name="container"></param>
            <typeparam name="TServiceType"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerHelper.IsTypeRegistered(Castle.Windsor.IWindsorContainer,System.Type,System.String)">
            <summary>
            Returns whether a specified theClassType has a theClassType mapping registered in the container.
            </summary>
            <param name="container">The <see cref="T:Castle.Windsor.IWindsorContainer"/> to check for the theClassType mapping.</param>
            <param name="type">The theClassType to check if there is a theClassType mapping for.</param>
            <param name="name"></param>
            <returns><see langword="true"/> if there is a theClassType mapping registered for <paramref name="type"/>.</returns>
            <remarks>In order to use this extension method, you first need to add the
            </remarks>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerHelper.TryResolve``1(Castle.Windsor.IWindsorContainer)">
            <summary>
            Utility method to try to resolve a service from the container avoiding an exception if the container cannot build the theClassType.
            </summary>
            <param name="container">The container that will be used to resolve the theClassType.</param>
            <typeparam name="T">The theClassType to resolve.</typeparam>
            <returns>The instance of <typeparamref name="T"/> built up by the container.</returns>
        </member>
        <member name="M:Prism.CastleWindsor.Legacy.CastleWindsorContainerHelper.TryResolve(Castle.Windsor.IWindsorContainer,System.Type)">
            <summary>
            Utility method to try to resolve a service from the container avoiding an exception if the container cannot build the theClassType.
            </summary>
            <param name="container">The container that will be used to resolve the theClassType.</param>
            <param name="typeToResolve">The theClassType to resolve.</param>
            <returns>The instance of <paramref name="typeToResolve"/> built up by the container.</returns>
        </member>
        <member name="T:Prism.CastleWindsor.Shared.Local.Messages.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.BootstrapperSequenceCompleted">
            <summary>
              Looks up a localized string similar to Bootstrapper sequence completed..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.ConfiguringDefaultRegionBehaviors">
            <summary>
              Looks up a localized string similar to Configuring default region behaviors..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.ConfiguringModuleCatalog">
            <summary>
              Looks up a localized string similar to Configuring module catalog..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.ConfiguringRegionAdapters">
            <summary>
              Looks up a localized string similar to Configuring region adapters..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.ConfiguringServiceLocatorSingleton">
            <summary>
              Looks up a localized string similar to Configuring ServiceLocator singleton..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.ConfiguringUnityContainer">
            <summary>
              Looks up a localized string similar to Configuring the Unity container..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.CreatingModuleCatalog">
            <summary>
              Looks up a localized string similar to Creating module catalog..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.CreatingShell">
            <summary>
              Looks up a localized string similar to Creating the shell..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.CreatingWindsorContainer">
            <summary>
              Looks up a localized string similar to Creating Windsor container..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.InitializingModules">
            <summary>
              Looks up a localized string similar to Initializing modules..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.InitializingShell">
            <summary>
              Looks up a localized string similar to Initializing the shell..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.LoggerCreatedSuccessfully">
            <summary>
              Looks up a localized string similar to Logger was created successfully..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.NotOverwrittenGetModuleEnumeratorException">
            <summary>
              Looks up a localized string similar to The method &apos;GetModuleEnumerator&apos; of the bootstrapper must be overwritten in order to use the default module initialization logic..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.NullLoggerFacadeException">
            <summary>
              Looks up a localized string similar to The ILoggerFacade is required and cannot be null..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.NullModuleCatalogException">
            <summary>
              Looks up a localized string similar to The IModuleCatalog is required and cannot be null in order to initialize the modules..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.NullUnityContainerException">
            <summary>
              Looks up a localized string similar to The IUnityContainer is required and cannot be null..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.RegisteringFrameworkExceptionTypes">
            <summary>
              Looks up a localized string similar to Registering Framework Exception Types..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.SettingTheRegionManager">
            <summary>
              Looks up a localized string similar to Setting the RegionManager..
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.TypeMappingAlreadyRegistered">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; was already registered by the application. Skipping....
            </summary>
        </member>
        <member name="P:Prism.CastleWindsor.Shared.Local.Messages.Resources.UpdatingRegions">
            <summary>
              Looks up a localized string similar to Updating Regions..
            </summary>
        </member>
    </members>
</doc>
